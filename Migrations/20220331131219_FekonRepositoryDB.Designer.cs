// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using fekon_repository_datamodel.Models;

namespace fekon_repository_datamodel.Migrations
{
    [DbContext(typeof(REPOSITORY_DEVContext))]
    [Migration("20220331131219_FekonRepositoryDB")]
    partial class FekonRepositoryDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Author", b =>
                {
                    b.Property<long>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IsAdvisor")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AuthorId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.CollectionD", b =>
                {
                    b.Property<long>("CollectionDid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CollectionDId");

                    b.Property<string>("CollectionDname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CollectionDName");

                    b.Property<long>("CommunityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RefCollectionId")
                        .HasColumnType("bigint");

                    b.HasKey("CollectionDid");

                    b.HasIndex("CommunityId");

                    b.HasIndex("RefCollectionId");

                    b.ToTable("CollectionD");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.CollectionDlist", b =>
                {
                    b.Property<long>("CollectionDlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("CollectionDListId");

                    b.Property<long>("CollectionDid")
                        .HasColumnType("bigint")
                        .HasColumnName("CollectionDId");

                    b.Property<string>("CollectionDlistName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CollectionDListName");

                    b.HasKey("CollectionDlistId");

                    b.HasIndex("CollectionDid");

                    b.ToTable("CollectionDList");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Community", b =>
                {
                    b.Property<long>("CommunityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CommunityCode")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("CommunityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CommunityId");

                    b.ToTable("Community");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.DownloadStatistic", b =>
                {
                    b.Property<long>("DownloadStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("datetime");

                    b.Property<long>("FileDetailId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("DownloadStatisticId");

                    b.HasIndex("FileDetailId");

                    b.HasIndex("UserId");

                    b.ToTable("DownloadStatistic");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileDetail", b =>
                {
                    b.Property<long>("FileDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("FileExt")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("FileSize")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("OriginFileName")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<long?>("RepositoryId")
                        .HasColumnType("bigint");

                    b.HasKey("FileDetailId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("FileDetail");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileMonitoringHist", b =>
                {
                    b.Property<long>("FileMonitoringHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RunningDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RunningDuration")
                        .HasColumnType("int");

                    b.Property<int>("TotalFile")
                        .HasColumnType("int");

                    b.Property<int>("TotalFileProblem")
                        .HasColumnType("int");

                    b.Property<int>("TotalSize")
                        .HasColumnType("int");

                    b.HasKey("FileMonitoringHistId");

                    b.ToTable("FileMonitoringHist");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileMonitoringResult", b =>
                {
                    b.Property<long>("FileMonitoringResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("FileDetailId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileMonitoringHistId")
                        .HasColumnType("bigint");

                    b.Property<string>("StatusFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("FileMonitoringResultId");

                    b.HasIndex("FileDetailId");

                    b.HasIndex("FileMonitoringHistId");

                    b.ToTable("FileMonitoringResult");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Publisher", b =>
                {
                    b.Property<long>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("PublisherName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefCategorySearch", b =>
                {
                    b.Property<long>("RefCategorySearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Property")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PropertyCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RefCategorySearchId");

                    b.ToTable("RefCategorySearch");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefCollection", b =>
                {
                    b.Property<long>("RefCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("CollCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CollName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("RefCollectionId");

                    b.ToTable("RefCollection");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefEmployee", b =>
                {
                    b.Property<long>("RefEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmployeeNo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsActive")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<string>("ProfilePicLoc")
                        .HasMaxLength(450)
                        .IsUnicode(false)
                        .HasColumnType("varchar(450)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("RefEmployeeId");

                    b.HasIndex("UserId");

                    b.ToTable("RefEmployee");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefLanguage", b =>
                {
                    b.Property<string>("LangCode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("LangName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("LangCode")
                        .HasName("PK__RefLangu__F43B705372DC863F");

                    b.ToTable("RefLanguage");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefType", b =>
                {
                    b.Property<long>("RefTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("RefTypeId");

                    b.ToTable("RefType");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("IsActive")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength(true);

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__RefUser__1788CC4C479AB583");

                    b.ToTable("RefUser");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RepoStatistic", b =>
                {
                    b.Property<long>("RepoStatisticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("DownloadCount")
                        .HasColumnType("bigint");

                    b.Property<long>("LinkHitCount")
                        .HasColumnType("bigint");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("bigint");

                    b.HasKey("RepoStatisticId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepoStatistic");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Repository", b =>
                {
                    b.Property<long>("RepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("CollectionDid")
                        .HasColumnType("bigint")
                        .HasColumnName("CollectionDId");

                    b.Property<long?>("CommunitiyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("Publisher")
                        .HasColumnType("bigint");

                    b.Property<long?>("RefCollectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UsrCreate")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("RepositoryId");

                    b.HasIndex("CollectionDid");

                    b.HasIndex("CommunitiyId");

                    b.HasIndex("Publisher");

                    b.HasIndex("RefCollectionId");

                    b.ToTable("Repository");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RepositoryD", b =>
                {
                    b.Property<long>("RepositoryDid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<long>("RepositoryId")
                        .HasColumnType("bigint");

                    b.HasKey("RepositoryDid");

                    b.HasIndex("AuthorId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepositoryD");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.UserActivityHist", b =>
                {
                    b.Property<long>("UserActivityHistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("ActivityAction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ActivityDesc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("ActivityTime")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("UserActivityHistId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityHist");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserRole", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetRole", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUserToken", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.CollectionD", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.Community", "Community")
                        .WithMany("CollectionDs")
                        .HasForeignKey("CommunityId")
                        .HasConstraintName("FK__Collectio__Commu__02084FDA")
                        .IsRequired();

                    b.HasOne("fekon_repository_datamodel.Models.RefCollection", "RefCollection")
                        .WithMany("CollectionDs")
                        .HasForeignKey("RefCollectionId")
                        .HasConstraintName("FK__Collectio__RefCo__71D1E811");

                    b.Navigation("Community");

                    b.Navigation("RefCollection");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.CollectionDlist", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.CollectionD", "CollectionD")
                        .WithMany("CollectionDlists")
                        .HasForeignKey("CollectionDid")
                        .HasConstraintName("FK__Collectio__Colle__3F466844")
                        .IsRequired();

                    b.Navigation("CollectionD");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.DownloadStatistic", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.FileDetail", "FileDetail")
                        .WithMany("DownloadStatistics")
                        .HasForeignKey("FileDetailId")
                        .HasConstraintName("FK__DownloadS__FileD__29221CFB")
                        .IsRequired();

                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("DownloadStatistics")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__DownloadS__UserI__2A164134")
                        .IsRequired();

                    b.Navigation("FileDetail");

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileDetail", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.Repository", "Repository")
                        .WithMany("FileDetails")
                        .HasForeignKey("RepositoryId")
                        .HasConstraintName("FK__FileDetai__Repos__2C3393D0");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileMonitoringResult", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.FileDetail", "FileDetail")
                        .WithMany("FileMonitoringResults")
                        .HasForeignKey("FileDetailId")
                        .HasConstraintName("FK__FileMonit__FileD__2FCF1A8A");

                    b.HasOne("fekon_repository_datamodel.Models.FileMonitoringHist", "FileMonitoringHist")
                        .WithMany("FileMonitoringResults")
                        .HasForeignKey("FileMonitoringHistId")
                        .HasConstraintName("FK__FileMonit__FileM__2EDAF651");

                    b.Navigation("FileDetail");

                    b.Navigation("FileMonitoringHist");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefEmployee", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("RefEmployees")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__RefEmploy__UserI__4F47C5E3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RepoStatistic", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.Repository", "Repository")
                        .WithMany("RepoStatistics")
                        .HasForeignKey("RepositoryId")
                        .HasConstraintName("FK__RepoStati__Repos__4BAC3F29")
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Repository", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.CollectionD", "CollectionD")
                        .WithMany("Repositories")
                        .HasForeignKey("CollectionDid")
                        .HasConstraintName("FK__Repositor__Colle__70DDC3D8");

                    b.HasOne("fekon_repository_datamodel.Models.Community", "Communitiy")
                        .WithMany("Repositories")
                        .HasForeignKey("CommunitiyId")
                        .HasConstraintName("FK__Repositor__Commu__01142BA1");

                    b.HasOne("fekon_repository_datamodel.Models.Publisher", "PublisherNavigation")
                        .WithMany("Repositories")
                        .HasForeignKey("Publisher")
                        .HasConstraintName("FK__Repositor__Publi__29572725");

                    b.HasOne("fekon_repository_datamodel.Models.RefCollection", "RefCollection")
                        .WithMany("Repositories")
                        .HasForeignKey("RefCollectionId")
                        .HasConstraintName("FK__Repositor__RefCo__5AEE82B9");

                    b.Navigation("CollectionD");

                    b.Navigation("Communitiy");

                    b.Navigation("PublisherNavigation");

                    b.Navigation("RefCollection");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RepositoryD", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.Author", "Author")
                        .WithMany("RepositoryDs")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Repositor__Autho__48CFD27E")
                        .IsRequired();

                    b.HasOne("fekon_repository_datamodel.Models.Repository", "Repository")
                        .WithMany("RepositoryDs")
                        .HasForeignKey("RepositoryId")
                        .HasConstraintName("FK__Repositor__Repos__47DBAE45")
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.UserActivityHist", b =>
                {
                    b.HasOne("fekon_repository_datamodel.Models.AspNetUser", "User")
                        .WithMany("UserActivityHists")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserActiv__UserI__5224328E")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");

                    b.Navigation("AspNetUserRoles");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserRoles");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("DownloadStatistics");

                    b.Navigation("RefEmployees");

                    b.Navigation("UserActivityHists");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Author", b =>
                {
                    b.Navigation("RepositoryDs");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.CollectionD", b =>
                {
                    b.Navigation("CollectionDlists");

                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Community", b =>
                {
                    b.Navigation("CollectionDs");

                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileDetail", b =>
                {
                    b.Navigation("DownloadStatistics");

                    b.Navigation("FileMonitoringResults");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.FileMonitoringHist", b =>
                {
                    b.Navigation("FileMonitoringResults");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Publisher", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.RefCollection", b =>
                {
                    b.Navigation("CollectionDs");

                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("fekon_repository_datamodel.Models.Repository", b =>
                {
                    b.Navigation("FileDetails");

                    b.Navigation("RepositoryDs");

                    b.Navigation("RepoStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
